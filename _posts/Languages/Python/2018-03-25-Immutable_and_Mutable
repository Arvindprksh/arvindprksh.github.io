

There are two types of variables on python, one is Mutable and the other is Immutable. 

On python, it is different to manage reference of variable depending on whether or not variable is mutable. 

So specifically, you want to check the state of variables's reference like whether the references is the same or not. 

Use **id** function and **is** operator or **deepcopy** of copy module 

above all, Keep in mind of everyone in python is object, even function is thought of as object.

So when you creat a object, the object will have object id 


Let's dive deeper int to the detail of what is the mutable and immutable. 

Immutable type : 

1. numbers : int(), float(), comlex()
2. Immutable sequences : str(), tuple(), frozenset(), byte()

Mutable type : 

1. Mutable sequences : List(), bytearray()
2. set type : set()
3. mapping tyep : dictionary()
4. classes, class instances
5. etc. 






# copy module
import copy 
# reference of x variable
x = [1,2]
# assign the reference of x into y variable
y = x 
# z and x don't share the reference. i.e. the reference between z and x is different. 
z = x[:]

# Also, using deepcopy, it makes x and deepcp not share the reference like the location of variable stored. 
deepcp = copy.deepcopy(X)

print(id(x))
print(id(y))
print(id(z))
print(id(deepcp))

```
# The results of print functions above
x:140297386131144
y:140297386131144
z:140297388728008
deepcp:140297386129032
```

# Reference 
  
  - Eng ver. 
   - [Stackoverflow](https://stackoverflow.com/questions/8056130/immutable-vs-mutable-types)


 - Kor ver. 
  - [The difference of Mutable and Immutable on python](http://ledgku.tistory.com/54)
