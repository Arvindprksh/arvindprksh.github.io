---
layout: post
title: Tutorial of Scipy and Matplotlib with Stanford python tutorial
subtitle: I will let you know the basics of Scipy and MatplotLib
category: Python
tags: [language, python]
permalink: /2017/04/07/Tutorial_Of_Scipy_And_Matplotlib_Of_Standford/
bigimg: 
  - "/img/Image/BigImages/carmel.jpg" : "Carmel-by-the-Sea, CA (2016)"
---
{% include MathJax.html %}

the table of contens in this article. 

- Scipy
  - Image operations
  - MATLAB files
  - Distance between points
  
- Matplotlib
  - Plotting
  - SubPlots
  - Images
  
Let's explore more in detail.

## Scipy

Numpy provides a high-performance mulitidimensional array and basic tools to compute with and manipulate these arrrays. [Scipy](https://docs.scipy.org/doc/scipy/reference/) builds on this, and provides a large number of functions that operate on numpy arrays and are useful for different types of scientific and engineering applications.

The best way to get familiar with Scipy is to [browse the documentation](https://docs.scipy.org/doc/scipy/reference/index.html). We will highlight some parts of Scipy that you might find useful for this class.

### Image operations

Scipy provides some basix functions to work with images. For example, it has functions to read images from disk into numpy arrays, to write numpy arrays to disk as images, and to resize images. Here is a simple example that showcases these functions :

```ptyhon
>>> import numpy as np
## call of scipy module 
>>> from scipy.misc import imread, imsave, imresize
## Read an JPEG image into a numpy array
>>> img = imread('your path of image\cat.jpg')
## img is numpy array, you can verify dtype, ndim, rank, shape and so on
>>> print (type(img))
<class 'numpy.ndarray'>
>>> print (img.dtype, img.shape)
uint8 (400, 248, 3)
>>> img
array([[[132, 128, 117],
        [155, 151, 139],
        [181, 175, 161],
        ...,
        [ 78,  68,  43],
        [ 76,  65,  43],
        [ 64,  53,  31]],

       [[134, 130, 118],
        [152, 148, 136],
        [177, 171, 157],
        ...,
        [ 75,  65,  40],
        [ 72,  61,  39],
        [ 62,  51,  29]],

       [[138, 134, 122],
        [151, 145, 131],
        [174, 168, 152],
        ...,
        [ 71,  61,  36],
        [ 68,  58,  33],
        [ 59,  51,  28]],

       ...,
       [[115, 145,  75],
        [107, 137,  67],
        [106, 135,  69],
        ...,
        [113, 101,  79],
        [106,  94,  72],
        [103,  91,  67]],

       [[107, 134,  65],
        [112, 139,  72],
        [109, 138,  72],
        ...,
        [112,  97,  78],
        [109,  94,  73],
        [101,  89,  67]],

       [[124, 151,  84],
        [116, 143,  76],
        [111, 140,  74],
        ...,
        [ 91,  76,  57],
        [ 89,  74,  55],
        [ 86,  71,  50]]], dtype=uint8)
>>>
### 
>>> img_tinted = img * [1, 0.95, 0.9]
>>> imsave('your path to store image\cat_tinted.jpg', img_tinted)
>>> img_tinted = imresize(img_tinted, (300,300))
>>> imsave('your path to store image\cat_tinted_resized.jpg', img_tinted)
```

> img = imread('your path of image\cat.jpg')
> print (img.dtype, img.shape)

Like the above code, the image read.

![](/img/Image/Languages/Python/2017-04-07-Tutorial_Of_Scipy_And_Matplotlib_Of_Standford/cat.jpg)

> img_tinted = img * [1, 0.95, 0.9]

this change RGB of Image.

![](/img/Image/Languages/Python/2017-04-07-Tutorial_Of_Scipy_And_Matplotlib_Of_Standford/cat_tinted.jpg)

> img_tinted = imresize(img_tinted, (300,300))

this resize the size of image, in my case, 300 X 300.

![](/img/Image/Languages/Python/2017-04-07-Tutorial_Of_Scipy_And_Matplotlib_Of_Standford/cat_tinted_resized.jpg)

If I compare the original image with this resized.

---

![](/img/Image/Languages/Python/2017-04-07-Tutorial_Of_Scipy_And_Matplotlib_Of_Standford/cat.jpg) [](/img/Image/Languages/Python/2017-04-07-Tutorial_Of_Scipy_And_Matplotlib_Of_Standford/cat_tinted_resized.jpg)

Left: The original Image. Right: The tinted and resized Image.
--

### MATLAB files

The function **scipy.io.ioloadmat** and **Scipy.io.savement** allow you to read and write MATLAB files. If you want to know more in detail.

you can read about the information in [the documentation.](https://docs.scipy.org/doc/scipy/reference/io.html)

### Distance between points

Scipy defines some useful functions for computing distances between sets of points.

The function **scipy.spatial.distance.pdit** computes the distance between all pairs of points in a given set :

> First of all, Create the following array where each row is a point in 2-dimension space :
> x = np.array([[0,1],[1,0],[2,0]])

$$
x = \begin{bmatrix}
0 & 1 \cr
1 & 0 \cr
2 & 0 \cr
\end{bmatrix}
$$ 

> To compute the Euclidean distance between all rows of x.
> d[i,j] is the Euclidean distance between x[i,:], and [j, :].
> d = squareform(pdist(x, 'euclidean'))

$$
In\ x = \begin{bmatrix}
0 & 1 \cr
1 & 0 \cr
2 & 0 \cr
\end{bmatrix},\ if\ \begin{bmatrix}
0 \cr 
1 \cr
\end{bmatrix} = \vec a,\ \begin{bmatrix}
1 \cr
0 \cr
\end{bmatrix} = \vec b,\ \begin{bmatrix}
2 \cr 
0 \cr
\end{bmatrix} = \vec c
$$

$$
\vec a,\ \vec b\ and\ \vec c\ are\ in\ Cartesian\ Coordinate\ of\ \\rm I\! R^2
$$

you can get each distance of them with **pdist** function.

> dis = pdist(x, 'euclidean')
> dis
> array([ 1.41421356,  2.23606798,  1.        ])

$$
pdist(x, 'euclidean') = \begin{bmatrix}
1.41421356 & 2.23606798 & 1.  \cr
\end{bmatrix}
$$

In the above case, you cannot get accurate distance, I mean you don't know what it is between which two points of them.

> So, you need to use a function, squareform(pdist(x, 'euclidean'))

**Squareform** function make matrix square.

$$
squareform(pdist(x, 'euclidean')) = \begin{bmatrix}
0. & 1.41421356 & 2.23606798 \cr
1.41421356 & 0. & 1. \cr
2.23606798 & 1. & 0. \cr
\end{bmatrix}
$$

In the above matrix, each terms indicate distance between two points, you can know the location of two points.

the location of two points is the index of the above matrix term.

> if d = squareform(pdist(x, 'euclidean'))
> d[i, j] is the the Euclidean distance between x[i, :] and x[j, :]
> d[0, 0] is distance between x[0, :] and x[0, :]
> d[0, 1] is distance between x[0, :] and x[1, :]
> d[0, 2] is distance between x[0, :] and x[2, :]
> ...
> d[2, 1] is distance between x[2, :] and x[2, :]
> d[2, 2] is distance between x[2, :] and x[2, :]

> the location of Each point(thought of as a row of matrix x ) 

$$
In\ x = \begin{bmatrix}
0 & 1 \cr
1 & 0 \cr
2 & 0 \cr
\end{bmatrix},\ if\ \begin{bmatrix}
0 \cr 
1 \cr
\end{bmatrix} = \vec a,\ \begin{bmatrix}
1 \cr
0 \cr
\end{bmatrix} = \vec b,\ \begin{bmatrix}
2 \cr 
0 \cr
\end{bmatrix} = \vec c
$$

> d = squareform(pdist(x, 'euclidean'))

$$
d = squareform(pdist(x, 'euclidean')) = \begin{bmatrix}
0. & 1.41421356 & 2.23606798 \cr
1.41421356 & 0. & 1. \cr
2.23606798 & 1. & 0. \cr
\end{bmatrix}\  means\ 
$$

> d[i, j] is the the Euclidean distance between x[i, :] and x[j, :]

$$
0.(d[0, 0])\ is\ distance\ between\ \vec a = \begin{bmatrix}
0 \cr 
1 \cr
\end{bmatrix}\ and\ \vec a = \begin{bmatrix}
0 \cr 
1 \cr
\end{bmatrix}
$$


$$
1.41421356(d[1, 0])\ is\ distance\ between\ \vec b = \begin{bmatrix}
1 \cr
0 \cr
\end{bmatrix}\ and\ \vec a = \begin{bmatrix}
0 \cr 
1 \cr
\end{bmatrix}
$$


$$
2.23606798(d[2, 0])\ is\ distance\ between\ \vec c = \begin{bmatrix}
2 \cr 
0 \cr
\end{bmatrix}\ and\ \vec a = \begin{bmatrix}
0 \cr 
1 \cr
\end{bmatrix}
$$

> Finally, compare pdis(pdist(x, 'euclidean')) with squareform(pdist(x, 'euclidean'))

$$
pdist(x, 'euclidean') = \begin{bmatrix}
1.41421356 & 2.23606798 & 1.  \cr
\end{bmatrix}\  and
squareform(pdist(x, 'euclidean')) = \begin{bmatrix}
0. & 1.41421356 & 2.23606798 \cr
1.41421356 & 0. & 1. \cr
2.23606798 & 1. & 0. \cr
\end{bmatrix}
$$

Let's calculate the distance between two points in python code.

```python 
>>> import numpy as np
>>> from scipy.spatial.distance import pdist, squareform
>>> x = np.array([[0,1],[1,0],[2,0]])
>>> x
array([[0, 1],
       [1, 0],
       [2, 0]])
>>> print (x)
[[0 1]
 [1 0]
 [2 0]]
>>> d = squareform(pdist(x, 'euclidean'))
>>> d
array([[ 0.        ,  1.41421356,  2.23606798],
       [ 1.41421356,  0.        ,  1.        ],
       [ 2.23606798,  1.        ,  0.        ]])
>>> print (d)
[[ 0.          1.41421356  2.23606798]
 [ 1.41421356  0.          1.        ]
 [ 2.23606798  1.          0.        ]]
>>> d.shape
(3, 3)
>>> d.ndim
2

>>> dis = pdist(x, 'euclidean')
>>> dis
array([ 1.41421356,  2.23606798,  1.        ])
>>> print (dis)
[ 1.41421356  2.23606798  1.        ]
>>> dis.shape
(3,)
>>> dis.ndim
1
```


## Matplotlib


## Reference

 - [Stanford tutorial of python](http://cs231n.github.io/python-numpy-tutorial/#scipy)
 
 - [the official Scipy.org](https://docs.scipy.org/doc/scipy/reference/)
 
  For designs of this page 
  
  - [Stackedit](https://stackedit.io/editor)
  
  - [addition of MathJax](http://gastonsanchez.com/visually-enforced/opinion/2014/02/16/Mathjax-with-jekyll/)
  
  - [The basic Syntax of MathJax](http://www.onemathematicalcat.org/MathJaxDocumentation/MathJaxKorean/TeXSyntax_ko.html#matrix)
