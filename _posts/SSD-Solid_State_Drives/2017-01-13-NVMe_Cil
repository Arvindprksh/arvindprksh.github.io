


## [NVMe-Cli](https://github.com/linux-nvme/nvme-cli)

Now, I'm looking at commit version,**"0142aebd1125ae33cdf60fa957a8bfef5851a76e"**, on master brach, 

This tool made of OpenSource is for NVMe device. 

You can do anything of command of NVMexpression specification 1.2 and so on. 

it's like this

```shell
$ sudo ./nvme list
Node             SN                   Model                                    Namespace Usage                      Format           FW Rev  
---------------- -------------------- ---------------------------------------- --------- -------------------------- ---------------- --------
/dev/nvme0n1     SN IS ~~~~~~~~       Model's name of SSD                      1         1000.00  GB / 1000.00  GB   512   B +  0 B  Ver of FW
```

**OR**

```shell
$ sudo ./nvme smart-log /dev/nvme0 
Smart Log for NVME device:nvme0 namespace-id:ffffffff
critical_warning                    : 0
temperature                         : 00 C
available_spare                     : 000%
available_spare_threshold           : 00%
percentage_used                     : 0%
data_units_read                     : 00
data_units_written                  : 00,000,000
host_read_commands                  : 000
host_write_commands                 : 0,000,000,000
controller_busy_time                : 000
power_cycles                        : 0
power_on_hours                      : 000
unsafe_shutdowns                    : 0
media_errors                        : 0
num_err_log_entries                 : 0
Warning Temperature Time            : 0
Critical Composite Temperature Time : 0
Temperature Sensor 1                : 0 C
Temperature Sensor 2                : 0 C
Temperature Sensor 3                : 0 C
Temperature Sensor 4                : 0 C
Temperature Sensor 5                : 0 C
Temperature Sensor 6                : 0 C
Temperature Sensor 7                : 0 C
Temperature Sensor 8                : 0 C
```

As you can see the above command of nvme-cli, you can get information of nvme device with NVMe-cli tool. 

So far, The above nvme-cli with the commit version is similar to NVMe-cli ver1.1 release.

Later on, I would make VU command with NVMe-cli ver 1.1 opensource based on experience with NVMe-cli ver 0.7

In other words, according to NVMe specification, The common command of all NVMe device is included in NVMe-cil tool. 

Also, You can tune the NVMe-cli of opensource to make the fit VU command in addition. 

let's see NVME-Cli ver 1.1 release

## NVMe-Cli ver 1.1 release 

**NVMe-Cli-ver 0.7**

```shell
$ cd nvme-cli--0.7
$ ls -v
CONTRIBUTING.md  NVME-VERSION-GEN  linux            nvme-ioctl.c  regress
Documentation    README.md         nvme.c           nvme-ioctl.h  scripts
LICENSE          completions       nvme.control.in  nvme-print.c  src
Makefile         debian            nvme.spec.in     nvme-print.h
$ cd linux 
$ ls -v
nvme.h
```

**and**

**NVMe-Cli-ver 1.1**

```shell
$ cd nvme-cli-1.1
$ ls -v
CONTRIBUTING.md  NVME-VERSION-GEN  cmd.h          debian        intel-nvme.c  linux            memblaze-nvme.h  nvme.spec.in    nvme-lightnvm.c  nvme-print.c  plugin.c  suffix.c
Documentation    README.md         cmd_handler.h  define_cmd.h  intel-nvme.h  lnvm-nvme.c      nvme.c           nvme-builtin.h  nvme-lightnvm.h  nvme-print.h  plugin.h  suffix.h
LICENSE          argconfig.c       common.h       fabrics.c     json.c        lnvm-nvme.h      nvme.control.in  nvme-ioctl.c    nvme-models.c    parser.c      regress   tests
Makefile         argconfig.h       completions    fabrics.h     json.h        memblaze-nvme.c  nvme.h           nvme-ioctl.h    nvme-models.h    parser.h      scripts
$ cd linux
$ ls -v
lightnvm.h  nvme.h  nvme_ioctl.h
```

As you can compare NVMe-cli ver 1.1 with ver 0.7, many things is changed in NVMe-cli tool. 

I think because of change of mainline of kernel. 

Now, The mainline kernel supports NVMe fabric and LightNVM(Open-ChannelSSD).

So owing to NVMe Fabric, NVMe-cli tool supports json.c and fabrics.c and so on. 

And you can see lnvm-nvme.c and lightnvm.h of linux directory as well. 

**You can notice the trend of NVMe device changes to lightNVM and Fabrics.**

Also, as you can see lnvm-nvme.c file. I think the big trend of NVMe is Open-ChannelSSD and lightNVM. 

## ./nvme between ver 1.1 and ver 0.7 of NVMe-cli

**NVMe-Cli-ver 0.7**

```shell
$ ./nvme --help
nvme-0.7
usage: nvme <command> [<device>] [<args>]

The '<device>' may be either an NVMe character device (ex: /dev/nvme0) or an
nvme block device (ex: /dev/nvme0n1).

The following are all implemented sub-commands:
  list            List all NVMe devices and namespaces on machine
  id-ctrl         Send NVMe Identify Controller
  id-ns           Send NVMe Identify Namespace, display structure
  list-ns         Send NVMe Identify List, display structure
  create-ns       Creates a namespace with the provided parameters
  delete-ns       Deletes a namespace from the controller
  attach-ns       Attaches a namespace to requested controller(s)
  detach-ns       Detaches a namespace from requested controller(s)
  list-ctrl       Send NVMe Identify Controller List, display structure
  get-ns-id       Retrieve the namespace ID of opened block device
  get-log         Generic NVMe get log, returns log in raw format
  fw-log          Retrieve FW Log, show it
  smart-log       Retrieve SMART Log, show it
  smart-log-add   Retrieve additional SMART Log, show it
  error-log       Retrieve Error Log, show it
  get-feature     Get feature and show the resulting value
  set-feature     Set a feature and show the resulting value
  format          Format namespace with new block format
  fw-activate     Activate new firmware slot
  fw-download     Download new firmware
  admin-passthru  Submit arbitrary admin command, return results
  io-passthru     Submit an arbitrary IO command, return results
  security-send   Submit a Security Send command, return results
  security-recv   Submit a Security Receive command, return results
  resv-acquire    Submit a Reservation Acquire, return results
  resv-register   Submit a Reservation Register, return results
  resv-release    Submit a Reservation Release, return results
  resv-report     Submit a Reservation Report, return results
  dsm             Submit a Data Set Management command, return results
  flush           Submit a Flush command, return results
  compare         Submit a Compare command, return results
  read            Submit a read command, return results
  write           Submit a write command, return results
  write-zeroes    Submit a write zeroes command, return results
  write-uncor     Submit a write uncorrectable command, return results
  reset           Resets the controller
  subsystem-reset Resets the controller
  show-regs       Shows the controller registers. Requires admin character device
  version         Shows the program version
  help            Display this help

See 'nvme help <command>' for more information on a specific command.
```

**NVMe-Cli-ver 1.1**

```shell
$ ./nvme --help
nvme-1.1
usage: nvme <command> [<device>] [<args>]

The '<device>' may be either an NVMe character device (ex: /dev/nvme0) or an
nvme block device (ex: /dev/nvme0n1).

The following are all implemented sub-commands:
  list            List all NVMe devices and namespaces on machine
  id-ctrl         Send NVMe Identify Controller
  id-ns           Send NVMe Identify Namespace, display structure
  list-ns         Send NVMe Identify List, display structure
  create-ns       Creates a namespace with the provided parameters
  delete-ns       Deletes a namespace from the controller
  attach-ns       Attaches a namespace to requested controller(s)
  detach-ns       Detaches a namespace from requested controller(s)
  list-ctrl       Send NVMe Identify Controller List, display structure
  get-ns-id       Retrieve the namespace ID of opened block device
  get-log         Generic NVMe get log, returns log in raw format
  fw-log          Retrieve FW Log, show it
  smart-log       Retrieve SMART Log, show it
  error-log       Retrieve Error Log, show it
  get-feature     Get feature and show the resulting value
  set-feature     Set a feature and show the resulting value
  format          Format namespace with new block format
  fw-activate     Activate new firmware slot
  fw-download     Download new firmware
  admin-passthru  Submit arbitrary admin command, return results
  io-passthru     Submit an arbitrary IO command, return results
  security-send   Submit a Security Send command, return results
  security-recv   Submit a Security Receive command, return results
  resv-acquire    Submit a Reservation Acquire, return results
  resv-register   Submit a Reservation Register, return results
  resv-release    Submit a Reservation Release, return results
  resv-report     Submit a Reservation Report, return results
  dsm             Submit a Data Set Management command, return results
  flush           Submit a Flush command, return results
  compare         Submit a Compare command, return results
  read            Submit a read command, return results
  write           Submit a write command, return results
  write-zeroes    Submit a write zeroes command, return results
  write-uncor     Submit a write uncorrectable command, return results
  reset           Resets the controller
  subsystem-reset Resets the controller
  show-regs       Shows the controller registers. Requires admin character device
  discover        Discover NVMeoF subsystems
  connect-all     Discover and Connect to NVMeoF subsystems
  connect         Connect to NVMeoF subsystem
  disconnect      Disconnect from NVMeoF subsystem
  version         Shows the program version
  help            Display this help

See 'nvme help <command>' for more information on a specific command

The following are all installed plugin extensions:
  intel           Intel vendor specific extensions
  lnvm            LightNVM specific extensions
  memblaze        Memblaze vendor specific extensions

See 'nvme <plugin> help' for more information on a plugin
```

As you can see the above **$ ./nvme --help command**, That type of command has changed. 

Especially, In NVMe-cli-ver 1.1, note that plugin extension of intel, lnvm, memlblaze. 

So later On, I have to notice plugin extensions. 

For example, let's see "nvme lnvm help"

```shell
$ ./nvme lnvm help    
nvme-1.1
usage: nvme lnvm <command> [<device>] [<args>]

The '<device>' may be either an NVMe character device (ex: /dev/nvme0) or an
nvme block device (ex: /dev/nvme0n1).

LightNVM specific extensions

The following are all implemented sub-commands:
  list            List available LightNVM devices
  info            List general information and available target engines
  id-ns           List geometry for LightNVM device
  init            Initialize media manager on LightNVM device
  create          Create target on top of a LightNVM device
  remove          Remove target from device
  factory         Reset device to factory state
  diag-bbtbl      Diagnose bad block table
  diag-set-bbtbl  Update bad block table
  version         Shows the program version
  help            Display this help

See 'nvme lnvm help <command>' for more information on a specific command
```

As you can see the above output, note that lnvm-nvme.c and lnvm-nvme.h files. 

---
as similar to note that fabrics 


--- nvme-cli ver 0.7
## At first, nvme-builtin.h 

```c
#undef CMD_INC_FILE 
#define CMD_INC_FILE nvme-builtin 
 
#if !defined(NVME_BUILTIN) || defined(CMD_HEADER_MULTI_READ) 
#define NVME_BUILTIN 
 
#include "cmd.h" 
 
COMMAND_LIST( 
        ENTRY("list", "List all NVMe devices and namespaces on machine", list) 
        ENTRY("id-ctrl", "Send NVMe Identify Controller", id_ctrl) 
        ENTRY("id-ns", "Send NVMe Identify Namespace, display structure", id_ns) 
        ENTRY("list-ns", "Send NVMe Identify List, display structure", list_ns) 
        ENTRY("create-ns", "Creates a namespace with the provided parameters", create_ns) 
        ENTRY("delete-ns", "Deletes a namespace from the controller", delete_ns) 
        ENTRY("attach-ns", "Attaches a namespace to requested controller(s)", attach_ns) 
        ENTRY("detach-ns", "Detaches a namespace from requested controller(s)", detach_ns) 
        ENTRY("list-ctrl", "Send NVMe Identify Controller List, display structure", list_ctrl) 
        ENTRY("get-ns-id", "Retrieve the namespace ID of opened block device", get_ns_id) 
        ENTRY("get-log", "Generic NVMe get log, returns log in raw format", get_log) 
        ENTRY("fw-log", "Retrieve FW Log, show it", get_fw_log) 
        ENTRY("smart-log", "Retrieve SMART Log, show it", get_smart_log) 
        ENTRY("error-log", "Retrieve Error Log, show it", get_error_log) 
        ENTRY("get-feature", "Get feature and show the resulting value", get_feature) 
        ENTRY("set-feature", "Set a feature and show the resulting value", set_feature) 
        ENTRY("format", "Format namespace with new block format", format) 
        ENTRY("fw-activate", "Activate new firmware slot", fw_activate) 
        ENTRY("fw-download", "Download new firmware", fw_download) 
        ENTRY("admin-passthru", "Submit arbitrary admin command, return results", admin_passthru) 
        ENTRY("io-passthru", "Submit an arbitrary IO command, return results", io_passthru) 
        ENTRY("security-send", "Submit a Security Send command, return results", sec_send) 
        ENTRY("security-recv", "Submit a Security Receive command, return results", sec_recv) 
        ENTRY("resv-acquire", "Submit a Reservation Acquire, return results", resv_acquire) 
        ENTRY("resv-register", "Submit a Reservation Register, return results", resv_register) 
        ENTRY("resv-release", "Submit a Reservation Release, return results", resv_release) 
        ENTRY("resv-report", "Submit a Reservation Report, return results", resv_report) 
        ENTRY("dsm", "Submit a Data Set Management command, return results", dsm) 
        ENTRY("flush", "Submit a Flush command, return results", flush) 
        ENTRY("compare", "Submit a Compare command, return results", compare) 
        ENTRY("read", "Submit a read command, return results", read_cmd) 
        ENTRY("write", "Submit a write command, return results", write_cmd) 
        ENTRY("write-zeroes", "Submit a write zeroes command, return results", write_zeroes) 
        ENTRY("write-uncor", "Submit a write uncorrectable command, return results", write_uncor) 
        ENTRY("reset", "Resets the controller", reset) 
        ENTRY("subsystem-reset", "Resets the controller", subsystem_reset) 
        ENTRY("show-regs", "Shows the controller registers. Requires admin character device", show_registers) 
        ENTRY("discover", "Discover NVMeoF subsystems", discover_cmd) 
        ENTRY("connect-all", "Discover and Connect to NVMeoF subsystems", connect_all_cmd) 
        ENTRY("connect", "Connect to NVMeoF subsystem", connect_cmd) 
        ENTRY("disconnect", "Disconnect from NVMeoF subsystem", disconnect_cmd) 
); 
 
#endif 
 
#include "define_cmd.h"
```


## Second, nvme.c 

```c
static int get_smart_log(int argc, char **argv, struct command *cmd, struct plugin *plugin)
{
        struct nvme_smart_log smart_log;
        const char *desc = "Retrieve SMART log for the given device "\
                        "(or optionally a namespace) in either decoded format "\
                        "(default) or binary.";
        const char *namespace = "(optional) desired namespace";
        const char *raw = "output in binary format";
        int err, fmt, fd;

        struct config {
                __u32 namespace_id;
                int   raw_binary;
                char *output_format;
        };

        struct config cfg = {
                .namespace_id = 0xffffffff,
                .output_format = "normal",
        };

        const struct argconfig_commandline_options command_line_options[] = {
                {"namespace-id",  'n', "NUM", CFG_POSITIVE, &cfg.namespace_id,  required_argument, namespace},
                {"output-format", 'o', "FMT", CFG_STRING,   &cfg.output_format, required_argument, output_format },
                {"raw-binary",    'b', "",    CFG_NONE,     &cfg.raw_binary,    no_argument,       raw},
                {NULL}
        };

        fd = parse_and_open(argc, argv, desc, command_line_options, &cfg, sizeof(cfg));
        if (fd < 0)
                return fd;

        fmt = validate_output_format(cfg.output_format);
        if (fmt < 0)
                return fmt;
        if (cfg.raw_binary)
                fmt = BINARY;

        err = nvme_smart_log(fd, cfg.namespace_id, &smart_log);
        if (!err) {
                if (fmt == BINARY)
                        d_raw((unsigned char *)&smart_log, sizeof(smart_log));
                else if (fmt == JSON)
                        json_smart_log(&smart_log, cfg.namespace_id, devicename);
                else
                        show_smart_log(&smart_log, cfg.namespace_id, devicename);
        }
        else if (err > 0)
                fprintf(stderr, "NVMe Status:%s(%x)\n",
                                        nvme_status_to_string(err), err);
        else
                perror("smart log");
        return err;
}
```

From now on, just function to print 

## Third, nvme-print.h

```c
#ifndef NVME_PRINT_H
#define NVME_PRINT_H

#include "nvme.h"
#include <inttypes.h>

enum {
        TERSE = 0x1u,   // only show a few useful fields
        HUMAN = 0x2u,   // interpret some values for humans
        VS    = 0x4u,   // print vendor specific data area
        RAW   = 0x8u,   // just dump raw bytes
};

void d(unsigned char *buf, int len, int width, int group);
void d_raw(unsigned char *buf, unsigned len);

uint64_t int48_to_long(__u8 *data);

void __show_nvme_id_ctrl(struct nvme_id_ctrl *ctrl, unsigned int mode, void (*vendor_show)(__u8 *vs));
void show_nvme_id_ctrl(struct nvme_id_ctrl *ctrl, unsigned int mode);
void show_nvme_id_ns(struct nvme_id_ns *ns, unsigned int flags);
void show_nvme_resv_report(struct nvme_reservation_status *status);
void show_lba_range(struct nvme_lba_range_type *lbrt, int nr_ranges);
void show_error_log(struct nvme_error_log_page *err_log, int entries, const char *devname);
void show_intel_smart_log(struct nvme_additional_smart_log *smart, unsigned int nsid, const char *devname);
void show_smart_log(struct nvme_smart_log *smart, unsigned int nsid, const char *devname);
void show_fw_log(struct nvme_firmware_log_page *fw_log, const char *devname);
void show_ctrl_registers(void *bar, unsigned int mode);

void nvme_feature_show_fields(__u32 fid, unsigned int result, unsigned char *buf);
char *nvme_status_to_string(__u32 status);
char *nvme_select_to_string(int sel);
char *nvme_feature_to_string(int feature);

void json_nvme_id_ctrl(struct nvme_id_ctrl *ctrl, unsigned int mode);
void json_nvme_id_ns(struct nvme_id_ns *ns, unsigned int flags);
void json_nvme_resv_report(struct nvme_reservation_status *status);
void json_error_log(struct nvme_error_log_page *err_log, int entries, const char *devname);
void json_smart_log(struct nvme_smart_log *smart, unsigned int nsid, const char *devname);
void json_add_smart_log(struct nvme_additional_smart_log *smart,
                        unsigned int nsid, const char *devname);
void json_fw_log(struct nvme_firmware_log_page *fw_log, const char *devname);
void json_print_list_items(struct list_item *items, unsigned amnt);


#endif
```

## Addtionally, nvme-print.c file 

finally, IF you change this file. you can make nvme-cli tool to support VU command. 

**be careful, what I am saying is what version of NVMe-cli, because later on, version will be changed.**


**BUT**, If you want to support man operation of linux. you need a little more

let's make a code for VU command 

Ahead of making VU command, let's check what version of nvme-cli is right after "git clone https://github.com/linux-nvme/nvme-cli.git"

in nvme directory, type ./nvme after that, you would get the following result. 

```shell
$ ./nvme
nvme-1.1.2.g0142
usage: nvme <command> [<device>] [<args>]

The '<device>' may be either an NVMe character device (ex: /dev/nvme0) or an
nvme block device (ex: /dev/nvme0n1).

The following are all implemented sub-commands:
  list            List all NVMe devices and namespaces on machine
  id-ctrl         Send NVMe Identify Controller
  id-ns           Send NVMe Identify Namespace, display structure
  list-ns         Send NVMe Identify List, display structure
  create-ns       Creates a namespace with the provided parameters
  delete-ns       Deletes a namespace from the controller
  attach-ns       Attaches a namespace to requested controller(s)
  detach-ns       Detaches a namespace from requested controller(s)
  list-ctrl       Send NVMe Identify Controller List, display structure
  get-ns-id       Retrieve the namespace ID of opened block device
  get-log         Generic NVMe get log, returns log in raw format
  fw-log          Retrieve FW Log, show it
  smart-log       Retrieve SMART Log, show it
  error-log       Retrieve Error Log, show it
  get-feature     Get feature and show the resulting value
  set-feature     Set a feature and show the resulting value
  format          Format namespace with new block format
  fw-activate     Activate new firmware slot
  fw-download     Download new firmware
  admin-passthru  Submit arbitrary admin command, return results
  io-passthru     Submit an arbitrary IO command, return results
  security-send   Submit a Security Send command, return results
  security-recv   Submit a Security Receive command, return results
  resv-acquire    Submit a Reservation Acquire, return results
  resv-register   Submit a Reservation Register, return results
  resv-release    Submit a Reservation Release, return results
  resv-report     Submit a Reservation Report, return results
  dsm             Submit a Data Set Management command, return results
  flush           Submit a Flush command, return results
  compare         Submit a Compare command, return results
  read            Submit a read command, return results
  write           Submit a write command, return results
  write-zeroes    Submit a write zeroes command, return results
  write-uncor     Submit a write uncorrectable command, return results
  reset           Resets the controller
  subsystem-reset Resets the controller
  show-regs       Shows the controller registers. Requires admin character device
  discover        Discover NVMeoF subsystems
  connect-all     Discover and Connect to NVMeoF subsystems
  connect         Connect to NVMeoF subsystem
  disconnect      Disconnect from NVMeoF subsystem
  version         Shows the program version
  help            Display this help

See 'nvme help <command>' for more information on a specific command

The following are all installed plugin extensions:
  intel           Intel vendor specific extensions
  lnvm            LightNVM specific extensions
  memblaze        Memblaze vendor specific extensions

See 'nvme <plugin> help' for more information on a plugin
```

As you can see below, the version of NVMe-cli is nvme-1.1.2.g0142. 

So I could determine What version I would make VU command on. 

I decided That version is 1.1, you can get download in [release of the officail site of nvme-cli](https://github.com/linux-nvme/nvme-cli/releases). 

here is [v1.1 of nvme-cli release.](https://github.com/linux-nvme/nvme-cli/releases/tag/v1.1)


# let's start making VU command on NVMe-cli 1.1 release

## First, You have to download nvme-cli release version 1.1.

In my case, I downloaded nvme-cli-1.1.zip

let's uncompress that file. 

```shell 
$ unzip nvme-cli-1.1.zip

After that, as you can see the list with ls command, you would find out nvme-cli-1.1

$ ls
nvme-cli-0.7  nvme-cli-0.7.tar  nvme-cli-1.1
```

And then you need to chang some files to insert VU command into opensource(nvme-cli)

as you read the above files,first, I will change the file, nvme-builtin.h.

## nvme-builtin.h file

above all, I would exlain to you about code of nvme-builtin.h

```c
#undef CMD_INC_FILE
#define CMD_INC_FILE nvme-builtin

#if !defined(NVME_BUILTIN) || defined(CMD_HEADER_MULTI_READ)
#define NVME_BUILTIN

#include "cmd.h"

COMMAND_LIST(
        ENTRY("list", "List all NVMe devices and namespaces on machine", list)
        ......
);

#endif

#include "define_cmd.h"
```

As you see the above code. ENTRY indicates the list of ./nvme command. 

"list" - command name

"List all NVMe device and namespaces on machine" - summary about what role of this command is.

list - function name in nvme.c file 

you can check up what I am saying to you indirectly. type ./nvme in nvme-cli directory. 

```shell
$ ./nvme
nvme-1.1.2.g0142
usage: nvme <command> [<device>] [<args>]

The '<device>' may be either an NVMe character device (ex: /dev/nvme0) or an
nvme block device (ex: /dev/nvme0n1).

The following are all implemented sub-commands:
  list            List all NVMe devices and namespaces on machine
  ....
  
See 'nvme help <command>' for more information on a specific command

The following are all installed plugin extensions:
  intel           Intel vendor specific extensions
  lnvm            LightNVM specific extensions
  memblaze        Memblaze vendor specific extensions

```

So you change this file like this

```c

```c
#undef CMD_INC_FILE
#define CMD_INC_FILE nvme-builtin

#if !defined(NVME_BUILTIN) || defined(CMD_HEADER_MULTI_READ)
#define NVME_BUILTIN

#include "cmd.h"

COMMAND_LIST(
        ENTRY("list", "List all NVMe devices and namespaces on machine", list)
        ......
        // add ENTRY of VU command In here
        ENTRY("command of nvme-clie for VU command", "Description of NVMe-cli command", "Function name of nvme.c file for this Command")
        // For example
        ENTRY("nvme-waf", "get WAF from NVMe subsystem", get_waf)
);

#endif

#include "define_cmd.h"
```
```

## nvme.c and nvme.h




